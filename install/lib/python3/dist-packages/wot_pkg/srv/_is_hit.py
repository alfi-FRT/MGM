# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wot_pkg/is_hitRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import nav_msgs.msg
import std_msgs.msg
import visualization_msgs.msg

class is_hitRequest(genpy.Message):
  _md5sum = "94c7e6ad96bf8dcff171d5713a8b0458"
  _type = "wot_pkg/is_hitRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Request
visualization_msgs/Marker hitbox
nav_msgs/Odometry hit_location


================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2
uint8 DELETEALL=3

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: nav_msgs/Odometry
# This represents an estimate of a position and velocity in free space.  
# The pose in this message should be specified in the coordinate frame given by header.frame_id.
# The twist in this message should be specified in the coordinate frame given by the child_frame_id
Header header
string child_frame_id
geometry_msgs/PoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular
"""
  __slots__ = ['hitbox','hit_location']
  _slot_types = ['visualization_msgs/Marker','nav_msgs/Odometry']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hitbox,hit_location

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(is_hitRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.hitbox is None:
        self.hitbox = visualization_msgs.msg.Marker()
      if self.hit_location is None:
        self.hit_location = nav_msgs.msg.Odometry()
    else:
      self.hitbox = visualization_msgs.msg.Marker()
      self.hit_location = nav_msgs.msg.Odometry()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.hitbox.header.seq, _x.hitbox.header.stamp.secs, _x.hitbox.header.stamp.nsecs))
      _x = self.hitbox.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hitbox.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i10d4f2iB().pack(_x.hitbox.id, _x.hitbox.type, _x.hitbox.action, _x.hitbox.pose.position.x, _x.hitbox.pose.position.y, _x.hitbox.pose.position.z, _x.hitbox.pose.orientation.x, _x.hitbox.pose.orientation.y, _x.hitbox.pose.orientation.z, _x.hitbox.pose.orientation.w, _x.hitbox.scale.x, _x.hitbox.scale.y, _x.hitbox.scale.z, _x.hitbox.color.r, _x.hitbox.color.g, _x.hitbox.color.b, _x.hitbox.color.a, _x.hitbox.lifetime.secs, _x.hitbox.lifetime.nsecs, _x.hitbox.frame_locked))
      length = len(self.hitbox.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.hitbox.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.hitbox.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.hitbox.colors:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      _x = self.hitbox.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hitbox.mesh_resource
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.hitbox.mesh_use_embedded_materials, _x.hit_location.header.seq, _x.hit_location.header.stamp.secs, _x.hit_location.header.stamp.nsecs))
      _x = self.hit_location.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hit_location.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.hit_location.pose.pose.position.x, _x.hit_location.pose.pose.position.y, _x.hit_location.pose.pose.position.z, _x.hit_location.pose.pose.orientation.x, _x.hit_location.pose.pose.orientation.y, _x.hit_location.pose.pose.orientation.z, _x.hit_location.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.hit_location.pose.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.hit_location.twist.twist.linear.x, _x.hit_location.twist.twist.linear.y, _x.hit_location.twist.twist.linear.z, _x.hit_location.twist.twist.angular.x, _x.hit_location.twist.twist.angular.y, _x.hit_location.twist.twist.angular.z))
      buff.write(_get_struct_36d().pack(*self.hit_location.twist.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.hitbox is None:
        self.hitbox = visualization_msgs.msg.Marker()
      if self.hit_location is None:
        self.hit_location = nav_msgs.msg.Odometry()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.hitbox.header.seq, _x.hitbox.header.stamp.secs, _x.hitbox.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hitbox.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hitbox.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hitbox.ns = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hitbox.ns = str[start:end]
      _x = self
      start = end
      end += 117
      (_x.hitbox.id, _x.hitbox.type, _x.hitbox.action, _x.hitbox.pose.position.x, _x.hitbox.pose.position.y, _x.hitbox.pose.position.z, _x.hitbox.pose.orientation.x, _x.hitbox.pose.orientation.y, _x.hitbox.pose.orientation.z, _x.hitbox.pose.orientation.w, _x.hitbox.scale.x, _x.hitbox.scale.y, _x.hitbox.scale.z, _x.hitbox.color.r, _x.hitbox.color.g, _x.hitbox.color.b, _x.hitbox.color.a, _x.hitbox.lifetime.secs, _x.hitbox.lifetime.nsecs, _x.hitbox.frame_locked,) = _get_struct_3i10d4f2iB().unpack(str[start:end])
      self.hitbox.frame_locked = bool(self.hitbox.frame_locked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hitbox.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.hitbox.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hitbox.colors = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.hitbox.colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hitbox.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hitbox.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hitbox.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hitbox.mesh_resource = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.hitbox.mesh_use_embedded_materials, _x.hit_location.header.seq, _x.hit_location.header.stamp.secs, _x.hit_location.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.hitbox.mesh_use_embedded_materials = bool(self.hitbox.mesh_use_embedded_materials)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hit_location.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hit_location.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hit_location.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hit_location.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.hit_location.pose.pose.position.x, _x.hit_location.pose.pose.position.y, _x.hit_location.pose.pose.position.z, _x.hit_location.pose.pose.orientation.x, _x.hit_location.pose.pose.orientation.y, _x.hit_location.pose.pose.orientation.z, _x.hit_location.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.hit_location.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.hit_location.twist.twist.linear.x, _x.hit_location.twist.twist.linear.y, _x.hit_location.twist.twist.linear.z, _x.hit_location.twist.twist.angular.x, _x.hit_location.twist.twist.angular.y, _x.hit_location.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.hit_location.twist.covariance = _get_struct_36d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.hitbox.header.seq, _x.hitbox.header.stamp.secs, _x.hitbox.header.stamp.nsecs))
      _x = self.hitbox.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hitbox.ns
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i10d4f2iB().pack(_x.hitbox.id, _x.hitbox.type, _x.hitbox.action, _x.hitbox.pose.position.x, _x.hitbox.pose.position.y, _x.hitbox.pose.position.z, _x.hitbox.pose.orientation.x, _x.hitbox.pose.orientation.y, _x.hitbox.pose.orientation.z, _x.hitbox.pose.orientation.w, _x.hitbox.scale.x, _x.hitbox.scale.y, _x.hitbox.scale.z, _x.hitbox.color.r, _x.hitbox.color.g, _x.hitbox.color.b, _x.hitbox.color.a, _x.hitbox.lifetime.secs, _x.hitbox.lifetime.nsecs, _x.hitbox.frame_locked))
      length = len(self.hitbox.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.hitbox.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.hitbox.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.hitbox.colors:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      _x = self.hitbox.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hitbox.mesh_resource
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.hitbox.mesh_use_embedded_materials, _x.hit_location.header.seq, _x.hit_location.header.stamp.secs, _x.hit_location.header.stamp.nsecs))
      _x = self.hit_location.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hit_location.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.hit_location.pose.pose.position.x, _x.hit_location.pose.pose.position.y, _x.hit_location.pose.pose.position.z, _x.hit_location.pose.pose.orientation.x, _x.hit_location.pose.pose.orientation.y, _x.hit_location.pose.pose.orientation.z, _x.hit_location.pose.pose.orientation.w))
      buff.write(self.hit_location.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.hit_location.twist.twist.linear.x, _x.hit_location.twist.twist.linear.y, _x.hit_location.twist.twist.linear.z, _x.hit_location.twist.twist.angular.x, _x.hit_location.twist.twist.angular.y, _x.hit_location.twist.twist.angular.z))
      buff.write(self.hit_location.twist.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.hitbox is None:
        self.hitbox = visualization_msgs.msg.Marker()
      if self.hit_location is None:
        self.hit_location = nav_msgs.msg.Odometry()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.hitbox.header.seq, _x.hitbox.header.stamp.secs, _x.hitbox.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hitbox.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hitbox.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hitbox.ns = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hitbox.ns = str[start:end]
      _x = self
      start = end
      end += 117
      (_x.hitbox.id, _x.hitbox.type, _x.hitbox.action, _x.hitbox.pose.position.x, _x.hitbox.pose.position.y, _x.hitbox.pose.position.z, _x.hitbox.pose.orientation.x, _x.hitbox.pose.orientation.y, _x.hitbox.pose.orientation.z, _x.hitbox.pose.orientation.w, _x.hitbox.scale.x, _x.hitbox.scale.y, _x.hitbox.scale.z, _x.hitbox.color.r, _x.hitbox.color.g, _x.hitbox.color.b, _x.hitbox.color.a, _x.hitbox.lifetime.secs, _x.hitbox.lifetime.nsecs, _x.hitbox.frame_locked,) = _get_struct_3i10d4f2iB().unpack(str[start:end])
      self.hitbox.frame_locked = bool(self.hitbox.frame_locked)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hitbox.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.hitbox.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hitbox.colors = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.hitbox.colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hitbox.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hitbox.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hitbox.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hitbox.mesh_resource = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.hitbox.mesh_use_embedded_materials, _x.hit_location.header.seq, _x.hit_location.header.stamp.secs, _x.hit_location.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.hitbox.mesh_use_embedded_materials = bool(self.hitbox.mesh_use_embedded_materials)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hit_location.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hit_location.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hit_location.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hit_location.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.hit_location.pose.pose.position.x, _x.hit_location.pose.pose.position.y, _x.hit_location.pose.pose.position.z, _x.hit_location.pose.pose.orientation.x, _x.hit_location.pose.pose.orientation.y, _x.hit_location.pose.pose.orientation.z, _x.hit_location.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.hit_location.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.hit_location.twist.twist.linear.x, _x.hit_location.twist.twist.linear.y, _x.hit_location.twist.twist.linear.z, _x.hit_location.twist.twist.angular.x, _x.hit_location.twist.twist.angular.y, _x.hit_location.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.hit_location.twist.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i10d4f2iB = None
def _get_struct_3i10d4f2iB():
    global _struct_3i10d4f2iB
    if _struct_3i10d4f2iB is None:
        _struct_3i10d4f2iB = struct.Struct("<3i10d4f2iB")
    return _struct_3i10d4f2iB
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wot_pkg/is_hitResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class is_hitResponse(genpy.Message):
  _md5sum = "3a911ee423cc0145b8d402809243cbcf"
  _type = "wot_pkg/is_hitResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# Response
bool is_hit

"""
  __slots__ = ['is_hit']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_hit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(is_hitResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_hit is None:
        self.is_hit = False
    else:
      self.is_hit = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.is_hit
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.is_hit,) = _get_struct_B().unpack(str[start:end])
      self.is_hit = bool(self.is_hit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.is_hit
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.is_hit,) = _get_struct_B().unpack(str[start:end])
      self.is_hit = bool(self.is_hit)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class is_hit(object):
  _type          = 'wot_pkg/is_hit'
  _md5sum = '8c3518b3cea1613b70e7336af9bd5db1'
  _request_class  = is_hitRequest
  _response_class = is_hitResponse
