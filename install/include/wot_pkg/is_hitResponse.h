// Generated by gencpp from file wot_pkg/is_hitResponse.msg
// DO NOT EDIT!


#ifndef WOT_PKG_MESSAGE_IS_HITRESPONSE_H
#define WOT_PKG_MESSAGE_IS_HITRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wot_pkg
{
template <class ContainerAllocator>
struct is_hitResponse_
{
  typedef is_hitResponse_<ContainerAllocator> Type;

  is_hitResponse_()
    : is_hit(false)  {
    }
  is_hitResponse_(const ContainerAllocator& _alloc)
    : is_hit(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_hit_type;
  _is_hit_type is_hit;





  typedef boost::shared_ptr< ::wot_pkg::is_hitResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wot_pkg::is_hitResponse_<ContainerAllocator> const> ConstPtr;

}; // struct is_hitResponse_

typedef ::wot_pkg::is_hitResponse_<std::allocator<void> > is_hitResponse;

typedef boost::shared_ptr< ::wot_pkg::is_hitResponse > is_hitResponsePtr;
typedef boost::shared_ptr< ::wot_pkg::is_hitResponse const> is_hitResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wot_pkg::is_hitResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wot_pkg::is_hitResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wot_pkg::is_hitResponse_<ContainerAllocator1> & lhs, const ::wot_pkg::is_hitResponse_<ContainerAllocator2> & rhs)
{
  return lhs.is_hit == rhs.is_hit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wot_pkg::is_hitResponse_<ContainerAllocator1> & lhs, const ::wot_pkg::is_hitResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wot_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wot_pkg::is_hitResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wot_pkg::is_hitResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wot_pkg::is_hitResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wot_pkg::is_hitResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wot_pkg::is_hitResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wot_pkg::is_hitResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wot_pkg::is_hitResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a911ee423cc0145b8d402809243cbcf";
  }

  static const char* value(const ::wot_pkg::is_hitResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a911ee423cc0145ULL;
  static const uint64_t static_value2 = 0xb8d402809243cbcfULL;
};

template<class ContainerAllocator>
struct DataType< ::wot_pkg::is_hitResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wot_pkg/is_hitResponse";
  }

  static const char* value(const ::wot_pkg::is_hitResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wot_pkg::is_hitResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# Response\n"
"bool is_hit\n"
"\n"
;
  }

  static const char* value(const ::wot_pkg::is_hitResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wot_pkg::is_hitResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_hit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct is_hitResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wot_pkg::is_hitResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wot_pkg::is_hitResponse_<ContainerAllocator>& v)
  {
    s << indent << "is_hit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_hit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WOT_PKG_MESSAGE_IS_HITRESPONSE_H
